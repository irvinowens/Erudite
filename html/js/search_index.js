var search_data = {"index":{"searchIndex":["erudite","eruditeconfig","filesystem","append_to_file_in_keyspace()","create_keyspace_dir()","create_new_file_in_keyspace()","create_new_toc_file()","find_data_folder()","get_backup_folders()","get_config()","get_data_folders()","get_property_by_key()","hash()","hash_sections()","init_logger()","new()","new()","read_from_offset_in_keyspace()","readme"],"longSearchIndex":["erudite","eruditeconfig","filesystem","filesystem#append_to_file_in_keyspace()","filesystem#create_keyspace_dir()","filesystem#create_new_file_in_keyspace()","filesystem#create_new_toc_file()","filesystem#find_data_folder()","eruditeconfig#get_backup_folders()","eruditeconfig::get_config()","eruditeconfig#get_data_folders()","eruditeconfig#get_property_by_key()","filesystem#hash()","filesystem#hash_sections()","filesystem::init_logger()","eruditeconfig::new()","filesystem::new()","filesystem#read_from_offset_in_keyspace()",""],"info":[["Erudite","","Erudite.html","",""],["EruditeConfig","","EruditeConfig.html","","<p>the config class will wrap the configuration file and handle all queries\nfor it\n"],["FileSystem","","FileSystem.html","",""],["append_to_file_in_keyspace","FileSystem","FileSystem.html#method-i-append_to_file_in_keyspace","(keyspace:nil, file_name:nil)","<p>append to file in keyspace\n"],["create_keyspace_dir","FileSystem","FileSystem.html#method-i-create_keyspace_dir","(ks_name)","<p>Create a keyspace directory under the data dirs, in the case that we write\nto one of the other folders. …\n"],["create_new_file_in_keyspace","FileSystem","FileSystem.html#method-i-create_new_file_in_keyspace","(keyspace:nil, file_name:nil, row_id:nil)","<p>create new data file in keyspace, must provide the full path\n"],["create_new_toc_file","FileSystem","FileSystem.html#method-i-create_new_toc_file","(keyspace:nil)","<p>create new toc file in keyspace\n"],["find_data_folder","FileSystem","FileSystem.html#method-i-find_data_folder","(row_id, data_folders)","<p>get data folder by row id\n"],["get_backup_folders","EruditeConfig","EruditeConfig.html#method-i-get_backup_folders","()",""],["get_config","EruditeConfig","EruditeConfig.html#method-c-get_config","()","<p>Will just get the entire config and return it\n"],["get_data_folders","EruditeConfig","EruditeConfig.html#method-i-get_data_folders","()","<p>get the data folders\n"],["get_property_by_key","EruditeConfig","EruditeConfig.html#method-i-get_property_by_key","(key)","<p>will get a given property by the provided key\n"],["hash","FileSystem","FileSystem.html#method-i-hash","(string)","<p>hash string\n"],["hash_sections","FileSystem","FileSystem.html#method-i-hash_sections","(hash)","<p>get array of hash sections\n"],["init_logger","FileSystem","FileSystem.html#method-c-init_logger","(pname: 'erudite', conf:nil)","<p>Initialize the logger with a config and a pname\n"],["new","EruditeConfig","EruditeConfig.html#method-c-new","()",""],["new","FileSystem","FileSystem.html#method-c-new","()",""],["read_from_offset_in_keyspace","FileSystem","FileSystem.html#method-i-read_from_offset_in_keyspace","(keyspace: nil, file_name:nil, offset:0, length:-1)","<p>seek and read from offset and length in keyspace\n"],["README","","README_md.html","","<p>Erudite\n<p>Erudite Ruby Distributed Database\nI decided to write erudite because I was\nfascinated by Erlang’s ...\n"]]}}